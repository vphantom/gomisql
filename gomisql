#!/bin/sh
#
# For documentation, see: https://github.com/vphantom/gomisql
#
# ACKNOWLEDGEMENTS
#
# Graph X Design Inc. https://www.gxd.ca/ sponsored this project.
#
# LICENSE AND COPYRIGHT
#
# Copyright (c) 2018-2022 St√©phane Lavergne <https://github.com/vphantom>
#
# This program is distributed under the MIT (X11) License:
# http://www.opensource.org/licenses/mit-license.php
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.

VERSION="0.3.2"

# Default values
DEBUG=0
MPATH="./migrations/"
BACKEND="mysql"
BACKEND_ARGS="--batch --skip-column-names --disable-pager"

# Environment overrides
if [ -n "$GOMISQL_DEBUG"   ]; then DEBUG="$GOMISQL_DEBUG";       fi
if [ -n "$GOMISQL_PATH"    ]; then MPATH="$GOMISQL_PATH";        fi
if [ -n "$GOMISQL_BACKEND" ]; then BACKEND="$GOMISQL_BACKEND";   fi
if [ -n "$GOMISQL_ARGS"    ]; then BACKEND_ARGS="$GOMISQL_ARGS"; fi

## Functions

# Needs to return a status if backend failed or '#FAIL' found in output
backend() {
    IN=$(cat)
	ERR_ECHO=${1:-0}
    ERR=0
    if OUT=$(echo "$IN" |$BACKEND $BACKEND_ARGS 2>&1); then
        if echo "$OUT" |grep -q '#FAIL'; then
            if [ $DEBUG -ne 0 ]; then echo "Found '#FAIL' in back-end output, migration is not deployed."; fi
            ERR=2
        fi
    else
        ERR=1
    fi
    if [ $DEBUG -ne 0 ] || [ $ERR -gt 0 -a $ERR_ECHO -gt 0 ]; then echo ">>> $IN"; echo "<<< $OUT"; fi
    return $ERR
}

get_deps() {
    sed -E 's/^--[ ]*#Dependencies:[ ]*(.*)[ ]*$/\1/;t;d' "${MPATH}/${1}.sql"
}

get_deploy() {
    sed -E '/^--[ ]*#Deploy:.*$/,/^--/!d;/^(--.*|)$/d' "${MPATH}/${1}.sql"
}

get_verify() {
    sed -E '/^--[ ]*#Verify:.*$/,/^--/!d;/^(--.*|)$/d' "${MPATH}/${1}.sql"
}

get_revert() {
    sed -E '/^--[ ]*#Revert:.*$/,/^--/!d;/^(--.*|)$/d' "${MPATH}/${1}.sql"
}

all_migrations() {
    for MF in ${MPATH}/*.sql; do
        if [ ! -e "$MF" ]; then break; fi
        echo $(basename "$MF" ".sql")
    done
}

who_needs() {
    MFS=$(all_migrations)
    for MF in $MFS; do
        DEPS=$(get_deps "$MF")
        if echo "$DEPS" |grep -wq "$1"; then
            # NOTE: we rely on our output, so we MUST mute backend() even in DEBUG mode. :-(
            if get_verify "$MF" |backend >/dev/null 2>&1; then
                echo "$MF"
            fi
        fi
    done
}

deploy() {
    # We use the function stack to manage dependencies.  It's up to us to avoid circular ones.
    if echo "$DEPLOYMENTS" |grep -wq "$1"; then
        return
    fi
    DEPLOYMENTS="$DEPLOYMENTS $1"
    if get_verify "$1" |backend; then
        MFS_OK="$MFS_OK $1"
        if [ $DEBUG -ne 0 ]; then echo "  **  Already deployed: $1"; fi
        return
    fi
    DEPS=$(get_deps "$1")
    for DEP in $DEPS; do
        if ! deploy "$DEP"; then
            MFS_ERR="$MFS_ERR $1"
            return 1
        fi
    done
    get_deploy "$1" |backend 1
    # Must get_verify() twice because POSIX doesn't specify local variables
    if get_verify "$1" |backend; then
        MFS_OK="$MFS_OK $1"
        echo "  **  Successfully deployed: $1"
    else
        MFS_ERR="$MFS_ERR $1"
        echo "  **  FAILED TO DEPLOY: $1"
        return 1
    fi
}

deploy_all() {
    MFS=$(all_migrations)
    MFS_OK=""
    MFS_ERR=""
    for MF in $MFS; do
        deploy "$MF"
    done
}

verify() {
    DEPS=$(get_deps "$1")
    for DEP in $DEPS; do
        if [ ! -e "${MPATH}/${DEP}.sql" ]; then
            echo "  **  Migration $1 depends on $DEP, which does not exist."
            exit 2
        fi
    done
    get_verify "$1" |backend 1
}

verify_all() {
    MFS=$(all_migrations)
    MFS_OK=""
    MFS_ERR=""
    for MF in $MFS; do
        if verify "$MF"; then
            MFS_OK="$MFS_OK $MF"
        else
            MFS_ERR="$MFS_ERR $MF"
        fi
    done
}

revert() {
    VERIFY=$(get_verify "$1")
    if ! echo "$VERIFY" |backend; then
        echo "  **  Already reverted: $1"
        return
    fi
    DEPENDENTS=$(who_needs "$1")
    if test -n "$DEPENDENTS"; then
        echo "  **  NOT REVERTING, some installed migrations depend on $1:"
        echo "$DEPENDENTS"
        return 1
    fi
    get_revert "$1" |backend 1
    if echo "$VERIFY" |backend; then
        echo "  **  FAILED TO REVERT: $1"
        return 1
    else
        echo "  **  Reverted: $1"
    fi
}

status() {
    if [ -n "$MFS_OK" ]; then
        echo "  **  Installed migrations:"
        echo $MFS_OK
    else
        echo "  **  No migrations installed."
    fi
    if [ -n "$MFS_ERR" ]; then
        echo "  **  Available migrations:"
        echo $MFS_ERR
    else
        echo "  **  All available migrations are deployed."
    fi
}

## Main Program

MODE=""
MFS=""
MFS_OK=""
MFS_ERR=""
DEPLOYMENTS=""
while getopts ":hdp:b:a:" OPT; do
    case $OPT in
        h)
            MODE="help"
        ;;
        d)
            echo "  **  DEBUGGING ENABLED"
            DEBUG=1
        ;;
        p)
            MPATH="$OPTARG"
        ;;
        b)
            case $OPTARG in
                mysql)
                    BACKEND="mysql"
                 ;;
                sqlite|sqlite3)
                    BACKEND="sqlite3 -bail -batch -noheader"
                ;;
                postgresql|postgres|pgsql|psql|pg)
                    BACKEND="psql -w"
                ;;
                *)
                    echo "gomisql: Unknown back-end '$OPTARG'"
                    exit 1
                ;;
            esac
        ;;
        a)
            BACKEND_ARGS="$OPTARG $BACKEND_ARGS"
        ;;
        \?)
            echo "gomisql: Invalid option '-$OPTARG'"
            exit 1
        ;;
        :)
            echo "gomisql: Option '$OPTARG' requires an argument"
            exit 1
        ;;
    esac
done

shift $((OPTIND - 1))
if [ -z "$MODE" ]; then MODE="$1"; fi
if [ -n "$MODE" ]; then shift; fi

case $MODE in
    list)
        verify_all
        status
    ;;
    create)
        TARGET="$1"
        TARGET_FILE="${MPATH}/${TARGET}.sql"
        if test -z "$TARGET"; then echo "Missing migration name"; exit 1; fi
        if test -e "$TARGET_FILE"; then echo "Migration already exists: $TARGET_FILE"; exit 2; fi
        cat >"$TARGET_FILE" <<__EOF__

-- #Dependencies: 

-- #Deploy:

BEGIN;
COMMIT;

-- #Verify:

BEGIN;
/* Column some_table.some_column exists: */
SELECT some_column FROM some_table WHERE 0;
/* A row exists with some_table.some_column=42 */
SELECT COALESCE(some_column, '#FAIL', COUNT(*)) AS i FROM some_table WHERE id='42';
/* Index some_table.some_idx exists: (MySQL) */
SELECT COALESCE(index_schema, '#FAIL', COUNT(*)) AS i FROM information_schema.statistics
	WHERE table_schema=DATABASE() AND table_name='some_table' AND index_name='some_idx'
ROLLBACK;

-- #Revert:

BEGIN;
COMMIT;

__EOF__
    ;;
    deploy)
        TARGET="$1"
        if [ -z "$TARGET" ]; then
            deploy_all
            status
        else
            TARGET_FILE="${MPATH}/${TARGET}.sql"
            if test ! -e "$TARGET_FILE"; then echo "File not found: $TARGET_FILE"; exit 1; fi
            deploy "$1"
        fi
    ;;
    revert)
        TARGET="$1"
        if [ -z "$TARGET" ]; then echo "Missing migration name"; exit 1; fi
        TARGET_FILE="${MPATH}/${TARGET}.sql"
        if test ! -e "$TARGET_FILE"; then echo "File not found: $TARGET_FILE"; exit 1; fi
        revert "$1"
    ;;
    *)
        cat <<__EOF__

SQL Good Migrations v${VERSION}

Options:

-h            Display this help
-d            Display all executed SQL and back-end output
-p <path>     Location of migration SQL files [default: '${MPATH}']
-b <backend>  Back-end, one of: mysql (default), sqlite[3], postgresql|pgsql
-a <args>     Additional arguments to pass to back-end command (batch mode is already set)

Commands:

gomisql [opts] list           Run all validations to discover which still need deployment
gomisql [opts] create         Create empty migration "name" from handy template
gomisql [opts] deploy [name]  Deploy migration "name" and dependencies, or all available if not specified
gomisql [opts] revert name    Revert migration "name", if none deployed depend on it

__EOF__
    ;;
esac

exit 0
